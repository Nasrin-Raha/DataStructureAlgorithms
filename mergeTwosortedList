#class Node
class Node:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

#class linkedlist
class LinkedList:
    def __init__(self):
        self.head = None

#class mergelists

    def merge_two_lists(self, list1, list2):
        dummy = Node()
        current = dummy
        
        while list1 and list2:
            if list1.val < list2.val:
                current.next = list1
                current = list1
                list1 = list1.next
            else:
                current.next = list2
                current = list2
                list2 = list2.next
                
        current.next = list1 or list2
        return dummy.next

#Convert list to linkedlist in python
def list_to_linkedlist(lst):
    if not lst:
        return None
    head = Node(lst[0])
    current = head
    for val in lst[1:]:
        current.next = Node(val)
        current = current.next
    return head

#Convert linkedlist to list in python
def linkedlist_to_list(node):
    lst = []
    current = node
    while current:
        lst.append(current.val)
        current = current.next
    return lst
    
#Test cases     

def test_merge_two_lists():
    ll = LinkedList()

    # Test case 1: Both lists are empty
    l1 = list_to_linkedlist([])
    l2 = list_to_linkedlist([])
    merged = ll.merge_two_lists(l1, l2)
    assert linkedlist_to_list(merged) == [], f"Test case 1 failed: expected [], got {linkedlist_to_list(merged)}"

    # Test case 2: One list is empty, the other is not
    l1 = list_to_linkedlist([])
    l2 = list_to_linkedlist([1, 3, 5])
    merged = ll.merge_two_lists(l1, l2)
    assert linkedlist_to_list(merged) == [1, 3, 5], f"Test case 2 failed: expected [1, 3, 5], got {linkedlist_to_list(merged)}"

    l1 = list_to_linkedlist([2, 4, 6])
    l2 = list_to_linkedlist([])
    merged = ll.merge_two_lists(l1, l2)
    assert linkedlist_to_list(merged) == [2, 4, 6], f"Test case 3 failed: expected [2, 4, 6], got {linkedlist_to_list(merged)}"

    # Test case 3: Both lists have elements
    l1 = list_to_linkedlist([1, 2, 4])
    l2 = list_to_linkedlist([1, 3, 4])
    merged = ll.merge_two_lists(l1, l2)
    assert linkedlist_to_list(merged) == [1, 1, 2, 3, 4, 4], f"Test case 4 failed: expected [1, 1, 2, 3, 4, 4], got {linkedlist_to_list(merged)}"

    # Test case 4: Lists with varying lengths
    l1 = list_to_linkedlist([1, 2, 3, 4])
    l2 = list_to_linkedlist([5, 6])
    merged = ll.merge_two_lists(l1, l2)
    assert linkedlist_to_list(merged) == [1, 2, 3, 4, 5, 6], f"Test case 5 failed: expected [1, 2, 3, 4, 5, 6], got {linkedlist_to_list(merged)}"

    # Test case 5: Lists with overlapping elements
    l1 = list_to_linkedlist([2, 2, 2])
    l2 = list_to_linkedlist([2, 2, 2])
    merged = ll.merge_two_lists(l1, l2)
    assert linkedlist_to_list(merged) == [2, 2, 2, 2, 2, 2], f"Test case 6 failed: expected [2, 2, 2, 2, 2, 2], got {linkedlist_to_list(merged)}"

    print("All test cases passed!")

test_merge_two_lists()

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        
class LinkedList:
    def __init__(self):
        self.head = None
        
    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
        
    def insert_at_end(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node
     
    def delete_node(self, key):
        current = self.head
        if current and current.data == key:
            self.head = current.next
            current = None
            return
        prev = None
        while current and current.data != key:
            prev = current
            current = current.next
        if current is None:
            return
        prev.next = current.next
        current = None
        
    def search(self, key):
        current = self.head
        while current:
            if current.data == key:
                return True
            current = current.next
        return False
    
    def traverse(self):
        elements = []
        current = self.head
        while current:
            elements.append(current.data)
            current = current.next
        return elements

# Test cases
def test_linked_list():
    # Create a linked list
    ll = LinkedList()
    
    # Test insert_at_beginning
    ll.insert_at_beginning(3)
    ll.insert_at_beginning(2)
    ll.insert_at_beginning(1)
    assert ll.traverse() == [1, 2, 3], f"Expected [1, 2, 3] but got {ll.traverse()}"
    
    # Test insert_at_end
    ll.insert_at_end(4)
    ll.insert_at_end(5)
    assert ll.traverse() == [1, 2, 3, 4, 5], f"Expected [1, 2, 3, 4, 5] but got {ll.traverse()}"
    
    # Test delete_node
    ll.delete_node(1)  # Delete head
    assert ll.traverse() == [2, 3, 4, 5], f"Expected [2, 3, 4, 5] but got {ll.traverse()}"
    
    ll.delete_node(3)  # Delete middle node
    assert ll.traverse() == [2, 4, 5], f"Expected [2, 4, 5] but got {ll.traverse()}"
    
    ll.delete_node(5)  # Delete last node
    assert ll.traverse() == [2, 4], f"Expected [2, 4] but got {ll.traverse()}"
    
    # Test search
    assert ll.search(2) == True, f"Expected True but got {ll.search(2)}"
    assert ll.search(3) == False, f"Expected False but got {ll.search(3)}"
    
    print("All test cases pass")

# Run test cases
test_linked_list()
